openapi: 3.0.2
info:
  title: Keycloak Admin REST API
  description: This is a REST API reference for the Keycloak Admin REST API.
  version: "1.0"
paths:
  /admin/realms:
    get:
      tags:
        - Realms Admin
      summary: Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
      parameters:
        - in: query
          name: briefRepresentation
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Realms Admin
      summary: Import a realm. Imports a realm from a full representation of that realm.
      requestBody:
        description: '[file]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        2XX:
          description: OK
  /admin/realms/{realm}:
    get:
      tags:
        - Realms Admin
      summary: Get the top-level representation of the realm It will not include nested information like User and Client representations.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmRepresentation'
    put:
      tags:
        - Realms Admin
      summary: Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
      requestBody:
        description: RealmRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Realms Admin
      summary: Delete the realm
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/admin-events:
    get:
      tags:
        - Realms Admin
      summary: Get admin events Returns all admin events, or filters events based on URL query parameters listed here
      parameters:
        - in: query
          name: authClient
          schema:
            type: string
          style: form
        - in: query
          name: authIpAddress
          schema:
            type: string
          style: form
        - in: query
          name: authRealm
          schema:
            type: string
          style: form
        - in: query
          name: authUser
          description: user id
          schema:
            type: string
          style: form
        - in: query
          name: dateFrom
          schema:
            type: string
          style: form
        - in: query
          name: dateTo
          schema:
            type: string
          style: form
        - in: query
          name: first
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: Maximum results size (defaults to 100)
          schema:
            type: string
          style: form
        - in: query
          name: operationTypes
          description: '[String]'
          schema:
            type: string
          style: form
        - in: query
          name: resourcePath
          schema:
            type: string
          style: form
        - in: query
          name: resourceTypes
          description: '[String]'
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
        - Realms Admin
      summary: Delete all admin events
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/attack-detection/brute-force/users:
    delete:
      tags:
        - Attack Detection
      summary: Clear any user login failures for all users This can release temporary disabled users
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/attack-detection/brute-force/users/{userId}:
    get:
      tags:
        - Attack Detection
      summary: Get status of a username in brute force detection
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    delete:
      tags:
        - Attack Detection
      summary: Clear any user login failures for the user This can release temporary disabled user
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/authenticator-providers:
    get:
      tags:
        - Authentication Management
      summary: Get authenticator providers Returns a stream of authenticator providers.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/client-authenticator-providers:
    get:
      tags:
        - Authentication Management
      summary: Get client authenticator providers Returns a stream of client authenticator providers.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/config:
    post:
      tags:
        - Authentication Management
      summary: Create new authenticator configuration
      requestBody:
        description: AuthenticatorConfigRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/config-description/{providerId}:
    get:
      tags:
        - Authentication Management
      summary: Get authenticator providerâ€™s configuration description
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigInfoRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: providerId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/config/{id}:
    get:
      tags:
        - Authentication Management
      summary: Get authenticator configuration
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
    put:
      tags:
        - Authentication Management
      summary: Update authenticator configuration
      requestBody:
        description: AuthenticatorConfigRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Authentication Management
      summary: Delete authenticator configuration
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        description: Configuration id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/executions:
    post:
      tags:
        - Authentication Management
      summary: Add new authentication execution
      requestBody:
        description: AuthenticationExecutionRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationExecutionRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/executions/{executionId}:
    get:
      tags:
        - Authentication Management
      summary: Get Single Execution
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Authentication Management
      summary: Delete execution
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/executions/{executionId}/config:
    post:
      tags:
        - Authentication Management
      summary: Update execution with new configuration
      requestBody:
        description: AuthenticatorConfigRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: executionId
        description: Execution id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/executions/{executionId}/config/{id}:
    get:
      tags:
        - Authentication Management
      summary: Get executionâ€™s configuration
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: executionId
        description: Execution id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        description: Configuration id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/executions/{executionId}/lower-priority:
    post:
      tags:
        - Authentication Management
      summary: Lower executionâ€™s priority
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: executionId
        description: Execution id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/executions/{executionId}/raise-priority:
    post:
      tags:
        - Authentication Management
      summary: Raise executionâ€™s priority
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: executionId
        description: Execution id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/flows:
    get:
      tags:
        - Authentication Management
      summary: Get authentication flows Returns a stream of authentication flows.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Authentication Management
      summary: Create a new authentication flow
      requestBody:
        description: AuthenticationFlowRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationFlowRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/flows/{flowAlias}/copy:
    post:
      tags:
        - Authentication Management
      summary: Copy existing authentication flow under a new name The new name is given as 'newName' attribute of the passed JSON object
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_body'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: flowAlias
        description: name of the existing authentication flow
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/flows/{flowAlias}/executions:
    get:
      tags:
        - Authentication Management
      summary: Get authentication executions for a flow
      responses:
        2XX:
          description: OK
    put:
      tags:
        - Authentication Management
      summary: Update authentication executions of a Flow
      requestBody:
        description: AuthenticationExecutionInfoRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationExecutionInfoRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: flowAlias
        description: Flow alias
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/flows/{flowAlias}/executions/execution:
    post:
      tags:
        - Authentication Management
      summary: Add new authentication execution to a flow
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_body'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: flowAlias
        description: Alias of parent flow
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/flows/{flowAlias}/executions/flow:
    post:
      tags:
        - Authentication Management
      summary: Add new flow with new execution to existing flow
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_body'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: flowAlias
        description: Alias of parent authentication flow
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/flows/{id}:
    get:
      tags:
        - Authentication Management
      summary: Get authentication flow for id
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationFlowRepresentation'
    put:
      tags:
        - Authentication Management
      summary: Update an authentication flow
      requestBody:
        description: AuthenticationFlowRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationFlowRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Authentication Management
      summary: Delete an authentication flow
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/form-action-providers:
    get:
      tags:
        - Authentication Management
      summary: Get form action providers Returns a stream of form action providers.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/form-providers:
    get:
      tags:
        - Authentication Management
      summary: Get form providers Returns a stream of form providers.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/per-client-config-description:
    get:
      tags:
        - Authentication Management
      summary: Get configuration descriptions for all clients
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/register-required-action:
    post:
      tags:
        - Authentication Management
      summary: Register a new required actions
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_body'
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/required-actions:
    get:
      tags:
        - Authentication Management
      summary: Get required actions Returns a stream of required actions.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/required-actions/{alias}:
    get:
      tags:
        - Authentication Management
      summary: Get required action for alias
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredActionProviderRepresentation'
    put:
      tags:
        - Authentication Management
      summary: Update required action
      requestBody:
        description: RequiredActionProviderRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequiredActionProviderRepresentation'
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Authentication Management
      summary: Delete required action
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        description: Alias of required action
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/required-actions/{alias}/lower-priority:
    post:
      tags:
        - Authentication Management
      summary: Lower required actionâ€™s priority
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        description: Alias of required action
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/required-actions/{alias}/raise-priority:
    post:
      tags:
        - Authentication Management
      summary: Raise required actionâ€™s priority
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        description: Alias of required action
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/authentication/unregistered-required-actions:
    get:
      tags:
        - Authentication Management
      summary: Get unregistered required actions Returns a stream of unregistered required actions.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-description-converter:
    post:
      tags:
        - Realms Admin
      summary: Base path for importing clients under this realm.
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-policies/policies:
    get:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPoliciesRepresentation'
    put:
      tags:
        - Realms Admin
      requestBody:
        description: ClientPoliciesRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPoliciesRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-policies/profiles:
    get:
      tags:
        - Realms Admin
      parameters:
        - in: query
          name: include-global-profiles
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfilesRepresentation'
    put:
      tags:
        - Realms Admin
      requestBody:
        description: ClientProfilesRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfilesRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-registration-policy/providers:
    get:
      tags:
        - Client Registration Policy
      summary: Base path for retrieve providers with the configProperties properly filled
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes:
    get:
      tags:
        - Client Scopes
      summary: Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Client Scopes
      summary: Create a new client scope Client Scopeâ€™s name must be unique!
      requestBody:
        description: ClientScopeRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}:
    get:
      tags:
        - Protocol Mappers
      summary: Get mapper by id
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
    put:
      tags:
        - Protocol Mappers
      summary: Update the mapper
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Protocol Mappers
      summary: Delete the mapper
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}:
    get:
      tags:
        - Client Scopes
      summary: Get representation of the client scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientScopeRepresentation'
    put:
      tags:
        - Client Scopes
      summary: Update the client scope
      requestBody:
        description: ClientScopeRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Client Scopes
      summary: Delete the client scope
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/protocol-mappers/add-models:
    post:
      tags:
        - Protocol Mappers
      summary: Create multiple mappers
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/protocol-mappers/models:
    get:
      tags:
        - Protocol Mappers
      summary: Get mappers
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Protocol Mappers
      summary: Create a mapper
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}:
    get:
      tags:
        - Protocol Mappers
      summary: Get mappers by name for a specific protocol
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: protocol
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/scope-mappings:
    get:
      tags:
        - Scope Mappings
      summary: Get all scope mappings for the client
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/scope-mappings/clients/{client}:
    get:
      tags:
        - Scope Mappings
      summary: Get the roles associated with a clientâ€™s scope Returns roles for the client.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Scope Mappings
      summary: Add client-level roles to the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Scope Mappings
      summary: Remove client-level roles from the clientâ€™s scope.
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available:
    get:
      tags:
        - Scope Mappings
      summary: The available client-level roles Returns the roles for the client that can be associated with the clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite:
    get:
      tags:
        - Scope Mappings
      summary: Get effective client roles Returns the roles for the client that are associated with the clientâ€™s scope.
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/scope-mappings/realm:
    get:
      tags:
        - Scope Mappings
      summary: Get realm-level roles associated with the clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Scope Mappings
      summary: Add a set of realm-level roles to the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Scope Mappings
      summary: Remove a set of realm-level roles from the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/scope-mappings/realm/available:
    get:
      tags:
        - Scope Mappings
      summary: Get realm-level roles that are available to attach to this clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-scopes/{id}/scope-mappings/realm/composite:
    get:
      tags:
        - Scope Mappings
      summary: Get effective realm-level roles associated with the clientâ€™s scope What this does is recurse any composite roles associated with the clientâ€™s scope and adds the roles to this lists.
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-session-stats:
    get:
      tags:
        - Realms Admin
      summary: Get client session stats Returns a JSON map.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates:
    get:
      tags:
        - Client Scopes
      summary: Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Client Scopes
      summary: Create a new client scope Client Scopeâ€™s name must be unique!
      requestBody:
        description: ClientScopeRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id1}/protocol-mappers/models/{id2}:
    get:
      tags:
        - Protocol Mappers
      summary: Get mapper by id
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
    put:
      tags:
        - Protocol Mappers
      summary: Update the mapper
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Protocol Mappers
      summary: Delete the mapper
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}:
    get:
      tags:
        - Client Scopes
      summary: Get representation of the client scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientScopeRepresentation'
    put:
      tags:
        - Client Scopes
      summary: Update the client scope
      requestBody:
        description: ClientScopeRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Client Scopes
      summary: Delete the client scope
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/protocol-mappers/add-models:
    post:
      tags:
        - Protocol Mappers
      summary: Create multiple mappers
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/protocol-mappers/models:
    get:
      tags:
        - Protocol Mappers
      summary: Get mappers
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Protocol Mappers
      summary: Create a mapper
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}:
    get:
      tags:
        - Protocol Mappers
      summary: Get mappers by name for a specific protocol
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: protocol
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/scope-mappings:
    get:
      tags:
        - Scope Mappings
      summary: Get all scope mappings for the client
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/scope-mappings/clients/{client}:
    get:
      tags:
        - Scope Mappings
      summary: Get the roles associated with a clientâ€™s scope Returns roles for the client.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Scope Mappings
      summary: Add client-level roles to the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Scope Mappings
      summary: Remove client-level roles from the clientâ€™s scope.
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/scope-mappings/clients/{client}/available:
    get:
      tags:
        - Scope Mappings
      summary: The available client-level roles Returns the roles for the client that can be associated with the clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite:
    get:
      tags:
        - Scope Mappings
      summary: Get effective client roles Returns the roles for the client that are associated with the clientâ€™s scope.
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/scope-mappings/realm:
    get:
      tags:
        - Scope Mappings
      summary: Get realm-level roles associated with the clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Scope Mappings
      summary: Add a set of realm-level roles to the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Scope Mappings
      summary: Remove a set of realm-level roles from the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/scope-mappings/realm/available:
    get:
      tags:
        - Scope Mappings
      summary: Get realm-level roles that are available to attach to this clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/client-templates/{id}/scope-mappings/realm/composite:
    get:
      tags:
        - Scope Mappings
      summary: Get effective realm-level roles associated with the clientâ€™s scope What this does is recurse any composite roles associated with the clientâ€™s scope and adds the roles to this lists.
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients:
    get:
      tags:
        - Clients
      summary: Get clients belonging to the realm.
      parameters:
        - in: query
          name: clientId
          description: filter by clientId
          schema:
            type: string
          style: form
        - in: query
          name: first
          description: the first result
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: the max results to return
          schema:
            type: string
          style: form
        - in: query
          name: q
          schema:
            type: string
          style: form
        - in: query
          name: search
          description: whether this is a search query or a getClientById query
          schema:
            type: string
          style: form
        - in: query
          name: viewableOnly
          description: filter clients that cannot be viewed in full by admin
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Clients
      summary: Create a new client Clientâ€™s client_id must be unique!
      requestBody:
        description: ClientRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients-initial-access:
    get:
      tags:
        - Client Initial Access
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Client Initial Access
      summary: Create a new initial access token.
      requestBody:
        description: ClientInitialAccessCreatePresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInitialAccessCreatePresentation'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInitialAccessPresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients-initial-access/{id}:
    delete:
      tags:
        - Client Initial Access
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id1}/protocol-mappers/models/{id2}:
    get:
      tags:
        - Protocol Mappers
      summary: Get mapper by id
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
    put:
      tags:
        - Protocol Mappers
      summary: Update the mapper
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Protocol Mappers
      summary: Delete the mapper
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id1
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id2
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}:
    get:
      tags:
        - Clients
      summary: Get representation of the client
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
    put:
      tags:
        - Clients
      summary: Update the client
      requestBody:
        description: ClientRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Clients
      summary: Delete the client
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/certificates/{attr}:
    get:
      tags:
        - Client Attribute Certificate
      summary: Get key info
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/certificates/{attr}/download:
    post:
      tags:
        - Client Attribute Certificate
      summary: Get a keystore file for the client, containing private key and public certificate
      requestBody:
        description: KeyStoreConfig
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyStoreConfig'
      responses:
        2XX:
          description: OK
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/[File]'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/certificates/{attr}/generate:
    post:
      tags:
        - Client Attribute Certificate
      summary: Generate a new certificate with new key pair
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/certificates/{attr}/generate-and-download:
    post:
      tags:
        - Client Attribute Certificate
      summary: Generate a new keypair and certificate, and get the private key file  Generates a keypair and certificate and serves the private key in a specified keystore format. Only generated public certificate is saved in Keycloak DB - the private key is not.
      requestBody:
        description: KeyStoreConfig
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyStoreConfig'
      responses:
        2XX:
          description: OK
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/[File]'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/certificates/{attr}/upload:
    post:
      tags:
        - Client Attribute Certificate
      summary: Upload certificate and eventually private key
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/certificates/{attr}/upload-certificate:
    post:
      tags:
        - Client Attribute Certificate
      summary: Upload only certificate, not private key
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: attr
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/client-secret:
    get:
      tags:
        - Clients
      summary: Get the client secret
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
    post:
      tags:
        - Clients
      summary: Generate a new secret for the client
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/client-secret/rotated:
    get:
      tags:
        - Clients
      summary: Get the rotated client secret
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
    delete:
      tags:
        - Clients
      summary: Invalidate the rotated secret for the client
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/default-client-scopes:
    get:
      tags:
        - Clients
      summary: Get default client scopes.  Only name and ids are returned.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/default-client-scopes/{clientScopeId}:
    put:
      tags:
        - Clients
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Clients
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token:
    get:
      tags:
        - Clients
      summary: Create JSON with payload of example access token
      parameters:
        - in: query
          name: scope
          schema:
            type: string
          style: form
        - in: query
          name: userId
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token:
    get:
      tags:
        - Clients
      summary: Create JSON with payload of example id token
      parameters:
        - in: query
          name: scope
          schema:
            type: string
          style: form
        - in: query
          name: userId
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDToken'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo:
    get:
      tags:
        - Clients
      summary: Create JSON with payload of example user info
      parameters:
        - in: query
          name: scope
          schema:
            type: string
          style: form
        - in: query
          name: userId
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/evaluate-scopes/protocol-mappers:
    get:
      tags:
        - Clients
      summary: Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
      parameters:
        - in: query
          name: scope
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted:
    get:
      tags:
        - Clients
      summary: Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
      parameters:
        - in: query
          name: scope
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: roleContainerId
        description: either realm name OR client UUID
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted:
    get:
      tags:
        - Clients
      summary: Get roles, which this client doesnâ€™t have scope for and canâ€™t have them in the accessToken issued for him.
      parameters:
        - in: query
          name: scope
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: roleContainerId
        description: either realm name OR client UUID
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/installation/providers/{providerId}:
    get:
      tags:
        - Clients
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: providerId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/management/permissions:
    get:
      tags:
        - Clients
      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    put:
      tags:
        - Clients
      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference
      requestBody:
        description: ManagementPermissionReference
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/nodes:
    post:
      tags:
        - Clients
      summary: Register a cluster node with the client Manually register cluster node to this client - usually itâ€™s not needed to call this directly as adapter should handle by sending registration request to Keycloak
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_body'
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/nodes/{node}:
    delete:
      tags:
        - Clients
      summary: Unregister a cluster node from the client
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/offline-session-count:
    get:
      tags:
        - Clients
      summary: 'Get application offline session count Returns a number of offline user sessions associated with this client { \"count\": number }'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/offline-sessions:
    get:
      tags:
        - Clients
      summary: Get offline sessions for client Returns a list of offline user sessions associated with this client
      parameters:
        - in: query
          name: first
          description: Paging offset
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: Maximum results size (defaults to 100)
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/optional-client-scopes:
    get:
      tags:
        - Clients
      summary: Get optional client scopes.  Only name and ids are returned.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}:
    put:
      tags:
        - Clients
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Clients
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/protocol-mappers/add-models:
    post:
      tags:
        - Protocol Mappers
      summary: Create multiple mappers
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/protocol-mappers/models:
    get:
      tags:
        - Protocol Mappers
      summary: Get mappers
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Protocol Mappers
      summary: Create a mapper
      requestBody:
        description: ProtocolMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}:
    get:
      tags:
        - Protocol Mappers
      summary: Get mappers by name for a specific protocol
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: protocol
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/push-revocation:
    post:
      tags:
        - Clients
      summary: Push the clientâ€™s revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRequestResult'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/registration-access-token:
    post:
      tags:
        - Clients
      summary: Generate a new registration access token for the client
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/roles:
    get:
      tags:
        - Roles
      summary: Get all roles for the realm or client
      parameters:
        - in: query
          name: briefRepresentation
          schema:
            type: string
          style: form
        - in: query
          name: first
          schema:
            type: string
          style: form
        - in: query
          name: max
          schema:
            type: string
          style: form
        - in: query
          name: search
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Roles
      summary: Create a new role for the realm or client
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/roles/{role-name}:
    get:
      tags:
        - Roles
      summary: Get a role by name
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
    put:
      tags:
        - Roles
      summary: Update a role by name
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Roles
      summary: Delete a role by name
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: role's name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/roles/{role-name}/composites:
    get:
      tags:
        - Roles
      summary: Get composites of the role
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Roles
      summary: Add a composite to the role
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Roles
      summary: Remove roles from the roleâ€™s composite
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: role's name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}:
    get:
      tags:
        - Roles
      summary: Get client-level roles for the client that are in the roleâ€™s composite
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: role's name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: clientUuid
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/roles/{role-name}/composites/realm:
    get:
      tags:
        - Roles
      summary: Get realm-level roles of the roleâ€™s composite
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: role's name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/roles/{role-name}/groups:
    get:
      tags:
        - Roles
      summary: Returns a stream of groups that have the specified role name
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return a full representation of the {@code GroupRepresentation} objects.
          schema:
            type: string
          style: form
        - in: query
          name: first
          description: first result to return. Ignored if negative or {@code null}.
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: maximum number of results to return. Ignored if negative or {@code null}.
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: the role name.
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/roles/{role-name}/management/permissions:
    get:
      tags:
        - Roles
      summary: Return object stating whether role Authorization permissions have been initialized or not and a reference
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    put:
      tags:
        - Roles
      summary: Return object stating whether role Authorization permissions have been initialized or not and a reference
      requestBody:
        description: ManagementPermissionReference
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/roles/{role-name}/users:
    get:
      tags:
        - Roles
      summary: Returns a stream of users that have the specified role name.
      parameters:
        - in: query
          name: first
          description: first result to return. Ignored if negative or {@code null}.
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: maximum number of results to return. Ignored if negative or {@code null}.
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: the role name.
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/scope-mappings:
    get:
      tags:
        - Scope Mappings
      summary: Get all scope mappings for the client
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/scope-mappings/clients/{client}:
    get:
      tags:
        - Scope Mappings
      summary: Get the roles associated with a clientâ€™s scope Returns roles for the client.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Scope Mappings
      summary: Add client-level roles to the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Scope Mappings
      summary: Remove client-level roles from the clientâ€™s scope.
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/scope-mappings/clients/{client}/available:
    get:
      tags:
        - Scope Mappings
      summary: The available client-level roles Returns the roles for the client that can be associated with the clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/scope-mappings/clients/{client}/composite:
    get:
      tags:
        - Scope Mappings
      summary: Get effective client roles Returns the roles for the client that are associated with the clientâ€™s scope.
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/scope-mappings/realm:
    get:
      tags:
        - Scope Mappings
      summary: Get realm-level roles associated with the clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Scope Mappings
      summary: Add a set of realm-level roles to the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Scope Mappings
      summary: Remove a set of realm-level roles from the clientâ€™s scope
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/scope-mappings/realm/available:
    get:
      tags:
        - Scope Mappings
      summary: Get realm-level roles that are available to attach to this clientâ€™s scope
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/scope-mappings/realm/composite:
    get:
      tags:
        - Scope Mappings
      summary: Get effective realm-level roles associated with the clientâ€™s scope What this does is recurse any composite roles associated with the clientâ€™s scope and adds the roles to this lists.
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/service-account-user:
    get:
      tags:
        - Clients
      summary: Get a user dedicated to the service account
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/session-count:
    get:
      tags:
        - Clients
      summary: 'Get application session count Returns a number of user sessions associated with this client { \"count\": number }'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/test-nodes-available:
    get:
      tags:
        - Clients
      summary: Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRequestResult'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/clients/{id}/user-sessions:
    get:
      tags:
        - Clients
      summary: Get user sessions for client Returns a list of user sessions associated with this client
      parameters:
        - in: query
          name: first
          description: Paging offset
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: Maximum results size (defaults to 100)
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/components:
    get:
      tags:
        - Component
      parameters:
        - in: query
          name: name
          schema:
            type: string
          style: form
        - in: query
          name: parent
          schema:
            type: string
          style: form
        - in: query
          name: type
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Component
      requestBody:
        description: ComponentRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/components/{id}:
    get:
      tags:
        - Component
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRepresentation'
    put:
      tags:
        - Component
      requestBody:
        description: ComponentRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Component
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/components/{id}/sub-component-types:
    get:
      tags:
        - Component
      summary: List of subcomponent types that are available to configure for a particular parent component.
      parameters:
        - in: query
          name: type
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/credential-registrators:
    get:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/default-default-client-scopes:
    get:
      tags:
        - Realms Admin
      summary: Get realm default client scopes.  Only name and ids are returned.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/default-default-client-scopes/{clientScopeId}:
    put:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/default-groups:
    get:
      tags:
        - Realms Admin
      summary: Get group hierarchy.  Only name and ids are returned.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/default-groups/{groupId}:
    put:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/default-optional-client-scopes:
    get:
      tags:
        - Realms Admin
      summary: Get realm optional client scopes.  Only name and ids are returned.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}:
    put:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: clientScopeId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/events:
    get:
      tags:
        - Realms Admin
      summary: Get events Returns all events, or filters them based on URL query parameters listed here
      parameters:
        - in: query
          name: client
          description: App or oauth client name
          schema:
            type: string
          style: form
        - in: query
          name: dateFrom
          description: From date
          schema:
            type: string
          style: form
        - in: query
          name: dateTo
          description: To date
          schema:
            type: string
          style: form
        - in: query
          name: first
          description: Paging offset
          schema:
            type: string
          style: form
        - in: query
          name: ipAddress
          description: IP Address
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: Maximum results size (defaults to 100)
          schema:
            type: string
          style: form
        - in: query
          name: type
          description: The types of events to return [String]
          schema:
            type: string
          style: form
        - in: query
          name: user
          description: User id
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
        - Realms Admin
      summary: Delete all events
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/events/config:
    get:
      tags:
        - Realms Admin
      summary: Get the events provider configuration Returns JSON object with events provider configuration
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmEventsConfigRepresentation'
    put:
      tags:
        - Realms Admin
      requestBody:
        description: RealmEventsConfigRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmEventsConfigRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/group-by-path/{path}:
    get:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups:
    get:
      tags:
        - Groups
      summary: Get group hierarchy.  Only name and ids are returned.
      parameters:
        - in: query
          name: briefRepresentation
          schema:
            type: string
          style: form
        - in: query
          name: exact
          schema:
            type: string
          style: form
        - in: query
          name: first
          schema:
            type: string
          style: form
        - in: query
          name: max
          schema:
            type: string
          style: form
        - in: query
          name: populateHierarchy
          schema:
            type: string
          style: form
        - in: query
          name: q
          schema:
            type: string
          style: form
        - in: query
          name: search
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Groups
      summary: create or add a top level realm groupSet or create child.
      requestBody:
        description: GroupRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/count:
    get:
      tags:
        - Groups
      summary: Returns the groups counts.
      parameters:
        - in: query
          name: search
          schema:
            type: string
          style: form
        - in: query
          name: top
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}:
    get:
      tags:
        - Groups
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRepresentation'
    put:
      tags:
        - Groups
      summary: Update group, ignores subgroups.
      requestBody:
        description: GroupRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Groups
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/children:
    post:
      tags:
        - Groups
      summary: Set or create child.
      requestBody:
        description: GroupRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/management/permissions:
    get:
      tags:
        - Groups
      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    put:
      tags:
        - Groups
      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference
      requestBody:
        description: ManagementPermissionReference
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/members:
    get:
      tags:
        - Groups
      summary: Get users Returns a stream of users, filtered according to query parameters
      parameters:
        - in: query
          name: briefRepresentation
          description: Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.)
          schema:
            type: string
          style: form
        - in: query
          name: first
          description: Pagination offset
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: Maximum results size (defaults to 100)
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/role-mappings:
    get:
      tags:
        - Role Mapper
      summary: Get role mappings
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/role-mappings/clients/{client}:
    get:
      tags:
        - Client Role Mappings
      summary: Get client-level role mappings for the user, and the app
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Client Role Mappings
      summary: Add client-level roles to the user role mapping
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Client Role Mappings
      summary: Delete client-level roles from user role mapping
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/role-mappings/clients/{client}/available:
    get:
      tags:
        - Client Role Mappings
      summary: Get available client-level roles that can be mapped to the user
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/role-mappings/clients/{client}/composite:
    get:
      tags:
        - Client Role Mappings
      summary: Get effective client-level role mappings This recurses any composite roles
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/role-mappings/realm:
    get:
      tags:
        - Role Mapper
      summary: Get realm-level role mappings
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Role Mapper
      summary: Add realm-level role mappings to the user
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Role Mapper
      summary: Delete realm-level role mappings
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/role-mappings/realm/available:
    get:
      tags:
        - Role Mapper
      summary: Get realm-level roles that can be mapped
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/groups/{id}/role-mappings/realm/composite:
    get:
      tags:
        - Role Mapper
      summary: Get effective realm-level role mappings This will recurse all composite roles to get the result.
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/import-config:
    post:
      tags:
        - Identity Providers
      summary: Import identity provider from JSON body
      requestBody:
        description: '[object]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_body'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/instances:
    get:
      tags:
        - Identity Providers
      summary: Get identity providers
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Identity Providers
      summary: Create a new identity provider
      requestBody:
        description: IdentityProviderRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/instances/{alias}:
    get:
      tags:
        - Identity Providers
      summary: Get the identity provider
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderRepresentation'
    put:
      tags:
        - Identity Providers
      summary: Update the identity provider
      requestBody:
        description: IdentityProviderRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Identity Providers
      summary: Delete the identity provider
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/instances/{alias}/export:
    get:
      tags:
        - Identity Providers
      summary: Export public broker configuration for identity provider
      parameters:
        - in: query
          name: format
          description: Format to use
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions:
    get:
      tags:
        - Identity Providers
      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    put:
      tags:
        - Identity Providers
      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference
      requestBody:
        description: ManagementPermissionReference
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/instances/{alias}/mapper-types:
    get:
      tags:
        - Identity Providers
      summary: Get mapper types for identity provider
      responses:
        2XX:
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/instances/{alias}/mappers:
    get:
      tags:
        - Identity Providers
      summary: Get mappers for identity provider
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Identity Providers
      summary: Add a mapper to identity provider
      requestBody:
        description: IdentityProviderMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}:
    get:
      tags:
        - Identity Providers
      summary: Get mapper by id for the identity provider
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
    put:
      tags:
        - Identity Providers
      summary: Update a mapper for the identity provider
      requestBody:
        description: IdentityProviderMapperRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Identity Providers
      summary: Delete a mapper for the identity provider
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: alias
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        description: Mapper id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/identity-provider/providers/{provider_id}:
    get:
      tags:
        - Identity Providers
      summary: Get identity providers
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: provider_id
        description: Provider id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/keys:
    get:
      tags:
        - Key
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysMetadataRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/localization:
    get:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/localization/{locale}:
    get:
      tags:
        - Realms Admin
      parameters:
        - in: query
          name: useRealmDefaultLocaleFallback
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    post:
      tags:
        - Realms Admin
      summary: Import localization from uploaded JSON file
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_body'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: locale
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/localization/{locale}/{key}:
    get:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: OK
          content:
            text/plain:
              schema:
                type: string
    put:
      tags:
        - Realms Admin
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: locale
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/logout-all:
    post:
      tags:
        - Realms Admin
      summary: Removes all user sessions.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRequestResult'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/partial-export:
    post:
      tags:
        - Realms Admin
      summary: Partial export of existing realm into a JSON file.
      parameters:
        - in: query
          name: exportClients
          schema:
            type: string
          style: form
        - in: query
          name: exportGroupsAndRoles
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/partialImport:
    post:
      tags:
        - Realms Admin
      summary: Partial import from a JSON file to an existing realm.
      requestBody:
        description: '[file]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/push-revocation:
    post:
      tags:
        - Realms Admin
      summary: Push the realmâ€™s revocation policy to any client that has an admin url associated with it.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRequestResult'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles:
    get:
      tags:
        - Roles
      summary: Get all roles for the realm or client
      parameters:
        - in: query
          name: briefRepresentation
          schema:
            type: string
          style: form
        - in: query
          name: first
          schema:
            type: string
          style: form
        - in: query
          name: max
          schema:
            type: string
          style: form
        - in: query
          name: search
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Roles
      summary: Create a new role for the realm or client
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles-by-id/{role-id}:
    get:
      tags:
        - Roles (by ID)
      summary: Get a specific roleâ€™s representation
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
    put:
      tags:
        - Roles (by ID)
      summary: Update the role
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Roles (by ID)
      summary: Delete the role
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-id
        description: id of role
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles-by-id/{role-id}/composites:
    get:
      tags:
        - Roles (by ID)
      summary: Get roleâ€™s children Returns a set of roleâ€™s children provided the role is a composite.
      parameters:
        - in: query
          name: first
          schema:
            type: string
          style: form
        - in: query
          name: max
          schema:
            type: string
          style: form
        - in: query
          name: search
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Roles (by ID)
      summary: Make the role a composite role by associating some child roles
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Roles (by ID)
      summary: Remove a set of roles from the roleâ€™s composite
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}:
    get:
      tags:
        - Roles (by ID)
      summary: Get client-level roles for the client that are in the roleâ€™s composite
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: clientUuid
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles-by-id/{role-id}/composites/realm:
    get:
      tags:
        - Roles (by ID)
      summary: Get realm-level roles that are in the roleâ€™s composite
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles-by-id/{role-id}/management/permissions:
    get:
      tags:
        - Roles (by ID)
      summary: Return object stating whether role Authorization permissions have been initialized or not and a reference
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    put:
      tags:
        - Roles (by ID)
      summary: Return object stating whether role Authorization permissions have been initialized or not and a reference
      requestBody:
        description: ManagementPermissionReference
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles/{role-name}:
    get:
      tags:
        - Roles
      summary: Get a role by name
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
    put:
      tags:
        - Roles
      summary: Update a role by name
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Roles
      summary: Delete a role by name
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: role's name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles/{role-name}/composites:
    get:
      tags:
        - Roles
      summary: Get composites of the role
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Roles
      summary: Add a composite to the role
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Roles
      summary: Remove roles from the roleâ€™s composite
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: role's name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles/{role-name}/composites/clients/{clientUuid}:
    get:
      tags:
        - Roles
      summary: Get client-level roles for the client that are in the roleâ€™s composite
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: role's name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: clientUuid
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles/{role-name}/composites/realm:
    get:
      tags:
        - Roles
      summary: Get realm-level roles of the roleâ€™s composite
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: role's name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles/{role-name}/groups:
    get:
      tags:
        - Roles
      summary: Returns a stream of groups that have the specified role name
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return a full representation of the {@code GroupRepresentation} objects.
          schema:
            type: string
          style: form
        - in: query
          name: first
          description: first result to return. Ignored if negative or {@code null}.
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: maximum number of results to return. Ignored if negative or {@code null}.
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: the role name.
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles/{role-name}/management/permissions:
    get:
      tags:
        - Roles
      summary: Return object stating whether role Authorization permissions have been initialized or not and a reference
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    put:
      tags:
        - Roles
      summary: Return object stating whether role Authorization permissions have been initialized or not and a reference
      requestBody:
        description: ManagementPermissionReference
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/roles/{role-name}/users:
    get:
      tags:
        - Roles
      summary: Returns a stream of users that have the specified role name.
      parameters:
        - in: query
          name: first
          description: first result to return. Ignored if negative or {@code null}.
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: maximum number of results to return. Ignored if negative or {@code null}.
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: role-name
        description: the role name.
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/sessions/{session}:
    delete:
      tags:
        - Realms Admin
      summary: Remove a specific user session.
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: session
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/testSMTPConnection:
    post:
      tags:
        - Realms Admin
      summary: Test SMTP connection with current logged in user
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_body'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users:
    get:
      tags:
        - Users
      summary: Get users Returns a stream of users, filtered according to query parameters.
      parameters:
        - in: query
          name: briefRepresentation
          description: 'Boolean which defines whether brief representations are returned (default: false)'
          schema:
            type: string
          style: form
        - in: query
          name: email
          description: A String contained in email, or the complete email, if param &quot;exact&quot; is true
          schema:
            type: string
          style: form
        - in: query
          name: emailVerified
          description: whether the email has been verified
          schema:
            type: string
          style: form
        - in: query
          name: enabled
          description: Boolean representing if user is enabled or not
          schema:
            type: string
          style: form
        - in: query
          name: exact
          description: Boolean which defines whether the params &quot;last&quot;, &quot;first&quot;, &quot;email&quot; and &quot;username&quot; must match exactly
          schema:
            type: string
          style: form
        - in: query
          name: first
          description: Pagination offset
          schema:
            type: string
          style: form
        - in: query
          name: firstName
          description: A String contained in firstName, or the complete firstName, if param &quot;exact&quot; is true
          schema:
            type: string
          style: form
        - in: query
          name: idpAlias
          description: The alias of an Identity Provider linked to the user
          schema:
            type: string
          style: form
        - in: query
          name: idpUserId
          description: The userId at an Identity Provider linked to the user
          schema:
            type: string
          style: form
        - in: query
          name: lastName
          description: A String contained in lastName, or the complete lastName, if param &quot;exact&quot; is true
          schema:
            type: string
          style: form
        - in: query
          name: max
          description: Maximum results size (defaults to 100)
          schema:
            type: string
          style: form
        - in: query
          name: q
          description: A query to search for custom attributes, in the format 'key1:value2 key2:value2'
          schema:
            type: string
          style: form
        - in: query
          name: search
          description: A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use foo for infix search and &quot;foo&quot; for exact search.
          schema:
            type: string
          style: form
        - in: query
          name: username
          description: A String contained in username, or the complete username, if param &quot;exact&quot; is true
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Users
      summary: Create a new user Username must be unique.
      requestBody:
        description: UserRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRepresentation'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users-management-permissions:
    get:
      tags:
        - Realms Admin
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    put:
      tags:
        - Realms Admin
      requestBody:
        description: ManagementPermissionReference
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/count:
    get:
      tags:
        - Users
      summary: Returns the number of users that match the given criteria.
      parameters:
        - in: query
          name: email
          description: email filter
          schema:
            type: string
          style: form
        - in: query
          name: emailVerified
          schema:
            type: string
          style: form
        - in: query
          name: enabled
          description: Boolean representing if user is enabled or not
          schema:
            type: string
          style: form
        - in: query
          name: firstName
          description: first name filter
          schema:
            type: string
          style: form
        - in: query
          name: lastName
          description: last name filter
          schema:
            type: string
          style: form
        - in: query
          name: q
          schema:
            type: string
          style: form
        - in: query
          name: search
          description: arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use foo for infix search and &quot;foo&quot; for exact search.
          schema:
            type: string
          style: form
        - in: query
          name: username
          description: username filter
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/profile:
    get:
      tags:
        - Users
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: string
    put:
      tags:
        - Users
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}:
    get:
      tags:
        - Users
      summary: Get representation of the user
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRepresentation'
    put:
      tags:
        - Users
      summary: Update the user
      requestBody:
        description: UserRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRepresentation'
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Users
      summary: Delete the user
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/configured-user-storage-credential-types:
    get:
      tags:
        - Users
      summary: Return credential types, which are provided by the user storage where user is stored.
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/consents:
    get:
      tags:
        - Users
      summary: Get consents granted by the user
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/consents/{client}:
    delete:
      tags:
        - Users
      summary: Revoke consent and offline tokens for particular client from user
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        description: Client id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/credentials:
    get:
      tags:
        - Users
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/credentials/{credentialId}:
    delete:
      tags:
        - Users
      summary: Remove a credential for a user
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: credentialId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}:
    post:
      tags:
        - Users
      summary: Move a credential to a position behind another credential
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: credentialId
        description: The credential to move
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: newPreviousCredentialId
        description: The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/credentials/{credentialId}/moveToFirst:
    post:
      tags:
        - Users
      summary: Move a credential to a first position in the credentials list of the user
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: credentialId
        description: The credential to move
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/credentials/{credentialId}/userLabel:
    put:
      tags:
        - Users
      summary: Update a credential label for a user
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: credentialId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/disable-credential-types:
    put:
      tags:
        - Users
      summary: Disable all credentials for a user of a specific type
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              type: string
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/execute-actions-email:
    put:
      tags:
        - Users
      summary: Send an email to the user with a link they can click to execute particular actions.
      parameters:
        - in: query
          name: client_id
          description: Client id
          schema:
            type: string
          style: form
        - in: query
          name: lifespan
          description: Number of seconds after which the generated token expires
          schema:
            type: string
          style: form
        - in: query
          name: redirect_uri
          description: Redirect uri
          schema:
            type: string
          style: form
      requestBody:
        description: '[string]'
        content:
          application/json:
            schema:
              type: string
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/federated-identity:
    get:
      tags:
        - Users
      summary: Get social logins associated with the user
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/federated-identity/{provider}:
    post:
      tags:
        - Users
      summary: Add a social login provider to the user
      responses:
        2XX:
          description: OK
    delete:
      tags:
        - Users
      summary: Remove a social login provider from user
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: provider
        description: Social login provider id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/groups:
    get:
      tags:
        - Users
      parameters:
        - in: query
          name: briefRepresentation
          schema:
            type: string
          style: form
        - in: query
          name: first
          schema:
            type: string
          style: form
        - in: query
          name: max
          schema:
            type: string
          style: form
        - in: query
          name: search
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/groups/count:
    get:
      tags:
        - Users
      parameters:
        - in: query
          name: search
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/groups/{groupId}:
    put:
      tags:
        - Users
      responses:
        2XX:
          description: No Content
    delete:
      tags:
        - Users
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/impersonation:
    post:
      tags:
        - Users
      summary: Impersonate the user
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/logout:
    post:
      tags:
        - Users
      summary: Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
      responses:
        2XX:
          description: Created
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/offline-sessions/{clientUuid}:
    get:
      tags:
        - Users
      summary: Get offline sessions associated with the user and client
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: clientUuid
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/reset-password:
    put:
      tags:
        - Users
      summary: Set up a new password for the user.
      requestBody:
        description: CredentialRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/reset-password-email:
    put:
      tags:
        - Users
      summary: Send an email to the user with a link they can click to reset their password.
      parameters:
        - in: query
          name: client_id
          description: client id
          schema:
            type: string
          style: form
        - in: query
          name: redirect_uri
          description: redirect uri
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/role-mappings:
    get:
      tags:
        - Role Mapper
      summary: Get role mappings
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/role-mappings/clients/{client}:
    get:
      tags:
        - Client Role Mappings
      summary: Get client-level role mappings for the user, and the app
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Client Role Mappings
      summary: Add client-level roles to the user role mapping
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Client Role Mappings
      summary: Delete client-level roles from user role mapping
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/role-mappings/clients/{client}/available:
    get:
      tags:
        - Client Role Mappings
      summary: Get available client-level roles that can be mapped to the user
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/role-mappings/clients/{client}/composite:
    get:
      tags:
        - Client Role Mappings
      summary: Get effective client-level role mappings This recurses any composite roles
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: client
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/role-mappings/realm:
    get:
      tags:
        - Role Mapper
      summary: Get realm-level role mappings
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Role Mapper
      summary: Add realm-level role mappings to the user
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Created
    delete:
      tags:
        - Role Mapper
      summary: Delete realm-level role mappings
      requestBody:
        description: RoleRepresentation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: No Content
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/role-mappings/realm/available:
    get:
      tags:
        - Role Mapper
      summary: Get realm-level roles that can be mapped
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/role-mappings/realm/composite:
    get:
      tags:
        - Role Mapper
      summary: Get effective realm-level role mappings This will recurse all composite roles to get the result.
      parameters:
        - in: query
          name: briefRepresentation
          description: if false, return roles with their attributes
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/send-verify-email:
    put:
      tags:
        - Users
      summary: Send an email-verification email to the user An email contains a link the user can click to verify their email address.
      parameters:
        - in: query
          name: client_id
          description: Client id
          schema:
            type: string
          style: form
        - in: query
          name: redirect_uri
          description: Redirect uri
          schema:
            type: string
          style: form
      responses:
        2XX:
          description: OK
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
  /admin/realms/{realm}/users/{id}/sessions:
    get:
      tags:
        - Users
      summary: Get sessions associated with the user
      responses:
        2XX:
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters:
      - in: path
        name: realm
        description: realm name (not id!)
        required: true
        schema:
          type: string
        style: simple
      - in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
components:
  securitySchemes:
    access_token:
      type: http
      scheme: bearer
      bearerFormat: null
  schemas:
    Access:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
          uniqueItems: true
        verify_caller:
          type: boolean
    AccessToken:
      type: object
      properties:
        jti:
          type: string
        exp:
          type: integer
          format: int64
        nbf:
          type: integer
          format: int64
        iat:
          type: integer
          format: int64
        iss:
          type: string
        sub:
          type: string
        typ:
          type: string
        azp:
          type: string
        otherClaims:
          type: object
          additionalProperties: true
        nonce:
          type: string
        auth_time:
          type: integer
          format: int64
        session_state:
          type: string
        at_hash:
          type: string
        c_hash:
          type: string
        name:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        middle_name:
          type: string
        nickname:
          type: string
        preferred_username:
          type: string
        profile:
          type: string
        picture:
          type: string
        website:
          type: string
        email:
          type: string
        email_verified:
          type: boolean
        gender:
          type: string
        birthdate:
          type: string
        zoneinfo:
          type: string
        locale:
          type: string
        phone_number:
          type: string
        phone_number_verified:
          type: boolean
        address:
          $ref: '#/components/schemas/AddressClaimSet'
        updated_at:
          type: integer
          format: int64
        claims_locales:
          type: string
        acr:
          type: string
        s_hash:
          type: string
        authTime:
          type: integer
          format: int32
        sid:
          type: string
        trusted-certs:
          type: array
          items:
            type: string
          uniqueItems: true
        allowed-origins:
          type: array
          items:
            type: string
          uniqueItems: true
        realm_access:
          $ref: '#/components/schemas/Access'
        resource_access:
          type: object
          additionalProperties: true
        authorization:
          $ref: '#/components/schemas/Authorization'
        cnf:
          $ref: '#/components/schemas/CertConf'
        scope:
          type: string
    AddressClaimSet:
      type: object
      properties:
        formatted:
          type: string
        street_address:
          type: string
        locality:
          type: string
        region:
          type: string
        postal_code:
          type: string
        country:
          type: string
    ApplicationRepresentation:
      type: object
      properties:
        id:
          type: string
        clientId:
          type: string
        description:
          type: string
        rootUrl:
          type: string
        adminUrl:
          type: string
        baseUrl:
          type: string
        surrogateAuthRequired:
          type: boolean
        enabled:
          type: boolean
        alwaysDisplayInConsole:
          type: boolean
        clientAuthenticatorType:
          type: string
        secret:
          type: string
        registrationAccessToken:
          type: string
        defaultRoles:
          type: array
          items:
            type: string
        redirectUris:
          type: array
          items:
            type: string
        webOrigins:
          type: array
          items:
            type: string
        notBefore:
          type: integer
          format: int32
        bearerOnly:
          type: boolean
        consentRequired:
          type: boolean
        standardFlowEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        oauth2DeviceAuthorizationGrantEnabled:
          type: boolean
        authorizationServicesEnabled:
          type: boolean
        directGrantsOnly:
          type: boolean
        publicClient:
          type: boolean
        frontchannelLogout:
          type: boolean
        protocol:
          type: string
        attributes:
          type: object
          additionalProperties: true
        authenticationFlowBindingOverrides:
          type: object
          additionalProperties: true
        fullScopeAllowed:
          type: boolean
        nodeReRegistrationTimeout:
          type: integer
          format: int32
        registeredNodes:
          type: object
          additionalProperties: true
        protocolMappers:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
        clientTemplate:
          type: string
        useTemplateConfig:
          type: boolean
        useTemplateScope:
          type: boolean
        useTemplateMappers:
          type: boolean
        defaultClientScopes:
          type: array
          items:
            type: string
        optionalClientScopes:
          type: array
          items:
            type: string
        authorizationSettings:
          $ref: '#/components/schemas/ResourceServerRepresentation'
        access:
          type: object
          additionalProperties: true
        origin:
          type: string
        name:
          type: string
        claims:
          $ref: '#/components/schemas/ApplicationRepresentation_claims'
    ApplicationRepresentationClaims:
      type: object
      properties:
        name:
          type: boolean
        username:
          type: boolean
        profile:
          type: boolean
        picture:
          type: boolean
        website:
          type: boolean
        email:
          type: boolean
        gender:
          type: boolean
        locale:
          type: boolean
        address:
          type: boolean
        phone:
          type: boolean
    AuthenticationExecutionExportRepresentation:
      type: object
      properties:
        authenticatorConfig:
          type: string
        authenticator:
          type: string
        authenticatorFlow:
          type: boolean
        requirement:
          type: string
        priority:
          type: integer
          format: int32
        autheticatorFlow:
          type: boolean
        flowAlias:
          type: string
        userSetupAllowed:
          type: boolean
    AuthenticationExecutionInfoRepresentation:
      type: object
      properties:
        id:
          type: string
        requirement:
          type: string
        displayName:
          type: string
        alias:
          type: string
        description:
          type: string
        requirementChoices:
          type: array
          items:
            type: string
        configurable:
          type: boolean
        authenticationFlow:
          type: boolean
        providerId:
          type: string
        authenticationConfig:
          type: string
        flowId:
          type: string
        level:
          type: integer
          format: int32
        index:
          type: integer
          format: int32
    AuthenticationExecutionRepresentation:
      type: object
      properties:
        authenticatorConfig:
          type: string
        authenticator:
          type: string
        authenticatorFlow:
          type: boolean
        requirement:
          type: string
        priority:
          type: integer
          format: int32
        autheticatorFlow:
          type: boolean
        id:
          type: string
        flowId:
          type: string
        parentFlow:
          type: string
    AuthenticationFlowRepresentation:
      type: object
      properties:
        id:
          type: string
        alias:
          type: string
        description:
          type: string
        providerId:
          type: string
        topLevel:
          type: boolean
        builtIn:
          type: boolean
        authenticationExecutions:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationExecutionExportRepresentation'
    AuthenticatorConfigInfoRepresentation:
      type: object
      properties:
        name:
          type: string
        providerId:
          type: string
        helpText:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
    AuthenticatorConfigRepresentation:
      type: object
      properties:
        id:
          type: string
        alias:
          type: string
        config:
          type: object
          additionalProperties: true
    Authorization:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    CertConf:
      type: object
      properties:
        x5t#S256:
          type: string
    CertificateRepresentation:
      type: object
      properties:
        privateKey:
          type: string
        publicKey:
          type: string
        certificate:
          type: string
        kid:
          type: string
    ClaimRepresentation:
      type: object
      properties:
        name:
          type: boolean
        username:
          type: boolean
        profile:
          type: boolean
        picture:
          type: boolean
        website:
          type: boolean
        email:
          type: boolean
        gender:
          type: boolean
        locale:
          type: boolean
        address:
          type: boolean
        phone:
          type: boolean
    ClientInitialAccessCreatePresentation:
      type: object
      properties:
        expiration:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
    ClientInitialAccessPresentation:
      type: object
      properties:
        id:
          type: string
        token:
          type: string
        timestamp:
          type: integer
          format: int32
        expiration:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
        remainingCount:
          type: integer
          format: int32
    ClientMappingsRepresentation:
      type: object
      properties:
        id:
          type: string
        client:
          type: string
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleRepresentation'
    ClientPoliciesRepresentation:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/ClientPolicyRepresentation'
    ClientPolicyConditionRepresentation:
      type: object
      properties:
        condition:
          type: string
        configuration:
          type: array
          items:
            type: object
    ClientPolicyExecutorRepresentation:
      type: object
      properties:
        executor:
          type: string
        configuration:
          type: array
          items:
            type: object
    ClientPolicyRepresentation:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/ClientPolicyConditionRepresentation'
        profiles:
          type: array
          items:
            type: string
    ClientProfileRepresentation:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        executors:
          type: array
          items:
            $ref: '#/components/schemas/ClientPolicyExecutorRepresentation'
    ClientProfilesRepresentation:
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/ClientProfileRepresentation'
        globalProfiles:
          type: array
          items:
            $ref: '#/components/schemas/ClientProfileRepresentation'
    ClientRepresentation:
      type: object
      properties:
        id:
          type: string
        clientId:
          type: string
        name:
          type: string
        description:
          type: string
        rootUrl:
          type: string
        adminUrl:
          type: string
        baseUrl:
          type: string
        surrogateAuthRequired:
          type: boolean
        enabled:
          type: boolean
        alwaysDisplayInConsole:
          type: boolean
        clientAuthenticatorType:
          type: string
        secret:
          type: string
        registrationAccessToken:
          type: string
        defaultRoles:
          type: array
          items:
            type: string
        redirectUris:
          type: array
          items:
            type: string
        webOrigins:
          type: array
          items:
            type: string
        notBefore:
          type: integer
          format: int32
        bearerOnly:
          type: boolean
        consentRequired:
          type: boolean
        standardFlowEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        oauth2DeviceAuthorizationGrantEnabled:
          type: boolean
        authorizationServicesEnabled:
          type: boolean
        directGrantsOnly:
          type: boolean
        publicClient:
          type: boolean
        frontchannelLogout:
          type: boolean
        protocol:
          type: string
        attributes:
          type: object
          additionalProperties: true
        authenticationFlowBindingOverrides:
          type: object
          additionalProperties: true
        fullScopeAllowed:
          type: boolean
        nodeReRegistrationTimeout:
          type: integer
          format: int32
        registeredNodes:
          type: object
          additionalProperties: true
        protocolMappers:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
        clientTemplate:
          type: string
        useTemplateConfig:
          type: boolean
        useTemplateScope:
          type: boolean
        useTemplateMappers:
          type: boolean
        defaultClientScopes:
          type: array
          items:
            type: string
        optionalClientScopes:
          type: array
          items:
            type: string
        authorizationSettings:
          $ref: '#/components/schemas/ResourceServerRepresentation'
        access:
          type: object
          additionalProperties: true
        origin:
          type: string
    ClientScopeRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        protocol:
          type: string
        attributes:
          type: object
          additionalProperties: true
        protocolMappers:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
    ClientTemplateRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        protocol:
          type: string
        fullScopeAllowed:
          type: boolean
        bearerOnly:
          type: boolean
        consentRequired:
          type: boolean
        standardFlowEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        publicClient:
          type: boolean
        frontchannelLogout:
          type: boolean
        attributes:
          type: object
          additionalProperties: true
        protocolMappers:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
    ComponentExportRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        providerId:
          type: string
        subType:
          type: string
        subComponents:
          type: object
          additionalProperties: true
        config:
          type: object
          additionalProperties: true
    ComponentRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        providerId:
          type: string
        providerType:
          type: string
        parentId:
          type: string
        subType:
          type: string
        config:
          type: object
          additionalProperties: true
    Composites:
      type: object
      properties:
        realm:
          type: array
          items:
            type: string
          uniqueItems: true
        client:
          type: object
          additionalProperties: true
        application:
          type: object
          additionalProperties: true
    ConfigPropertyRepresentation:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        helpText:
          type: string
        type:
          type: string
        defaultValue:
          type: object
        options:
          type: array
          items:
            type: string
        secret:
          type: boolean
        readOnly:
          type: boolean
    CredentialRepresentation:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        userLabel:
          type: string
        createdDate:
          type: integer
          format: int64
        secretData:
          type: string
        credentialData:
          type: string
        priority:
          type: integer
          format: int32
        value:
          type: string
        temporary:
          type: boolean
        device:
          type: string
        hashedSaltedValue:
          type: string
        salt:
          type: string
        hashIterations:
          type: integer
          format: int32
        counter:
          type: integer
          format: int32
        algorithm:
          type: string
        digits:
          type: integer
          format: int32
        period:
          type: integer
          format: int32
        config:
          type: object
          additionalProperties: true
    DecisionStrategy:
      type: object
    EnforcementMode:
      type: object
    FederatedIdentityRepresentation:
      type: object
      properties:
        identityProvider:
          type: string
        userId:
          type: string
        userName:
          type: string
    GlobalRequestResult:
      type: object
      properties:
        successRequests:
          type: array
          items:
            type: string
        failedRequests:
          type: array
          items:
            type: string
    GroupRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        path:
          type: string
        attributes:
          type: object
          additionalProperties: true
        realmRoles:
          type: array
          items:
            type: string
        clientRoles:
          type: object
          additionalProperties: true
        subGroups:
          type: array
          items:
            $ref: '#/components/schemas/GroupRepresentation'
        access:
          type: object
          additionalProperties: true
    IDToken:
      type: object
      properties:
        jti:
          type: string
        exp:
          type: integer
          format: int64
        nbf:
          type: integer
          format: int64
        iat:
          type: integer
          format: int64
        iss:
          type: string
        sub:
          type: string
        typ:
          type: string
        azp:
          type: string
        otherClaims:
          type: object
          additionalProperties: true
        nonce:
          type: string
        auth_time:
          type: integer
          format: int64
        session_state:
          type: string
        at_hash:
          type: string
        c_hash:
          type: string
        name:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        middle_name:
          type: string
        nickname:
          type: string
        preferred_username:
          type: string
        profile:
          type: string
        picture:
          type: string
        website:
          type: string
        email:
          type: string
        email_verified:
          type: boolean
        gender:
          type: string
        birthdate:
          type: string
        zoneinfo:
          type: string
        locale:
          type: string
        phone_number:
          type: string
        phone_number_verified:
          type: boolean
        address:
          $ref: '#/components/schemas/AddressClaimSet'
        updated_at:
          type: integer
          format: int64
        claims_locales:
          type: string
        acr:
          type: string
        s_hash:
          type: string
        authTime:
          type: integer
          format: int32
        sid:
          type: string
    IdentityProviderMapperRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        identityProviderAlias:
          type: string
        identityProviderMapper:
          type: string
        config:
          type: object
          additionalProperties: true
    IdentityProviderMapperTypeRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        helpText:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
    IdentityProviderRepresentation:
      type: object
      properties:
        alias:
          type: string
        displayName:
          type: string
        internalId:
          type: string
        providerId:
          type: string
        enabled:
          type: boolean
        updateProfileFirstLoginMode:
          type: string
        trustEmail:
          type: boolean
        storeToken:
          type: boolean
        addReadTokenRoleOnCreate:
          type: boolean
        authenticateByDefault:
          type: boolean
        linkOnly:
          type: boolean
        firstBrokerLoginFlowAlias:
          type: string
        postBrokerLoginFlowAlias:
          type: string
        config:
          type: object
          additionalProperties: true
        updateProfileFirstLogin:
          type: boolean
    InstallationAdapterConfig:
      type: object
      properties:
        realm:
          type: string
        realm-public-key:
          type: string
        auth-server-url:
          type: string
        ssl-required:
          type: string
        bearer-only:
          type: boolean
        resource:
          type: string
        public-client:
          type: boolean
        verify-token-audience:
          type: boolean
        credentials:
          type: object
          additionalProperties: true
        use-resource-role-mappings:
          type: boolean
        confidential-port:
          type: integer
          format: int32
        policy-enforcer:
          $ref: '#/components/schemas/PolicyEnforcerConfig'
    KeyMetadataRepresentation:
      type: object
      properties:
        providerId:
          type: string
        providerPriority:
          type: integer
          format: int64
        kid:
          type: string
        status:
          type: string
        type:
          type: string
        algorithm:
          type: string
        publicKey:
          type: string
        certificate:
          type: string
        use:
          $ref: '#/components/schemas/KeyUse'
    KeyStoreConfig:
      type: object
      properties:
        realmCertificate:
          type: boolean
        storePassword:
          type: string
        keyPassword:
          type: string
        keyAlias:
          type: string
        realmAlias:
          type: string
        format:
          type: string
    KeyUse:
      type: object
    KeysMetadataRepresentation:
      type: object
      properties:
        active:
          type: object
          additionalProperties: true
        keys:
          type: array
          items:
            $ref: '#/components/schemas/KeyMetadataRepresentation'
    Logic:
      type: object
    ManagementPermissionReference:
      type: object
      properties:
        enabled:
          type: boolean
        resource:
          type: string
        scopePermissions:
          type: object
          additionalProperties: true
    MappingsRepresentation:
      type: object
      properties:
        realmMappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleRepresentation'
        clientMappings:
          type: object
          additionalProperties: true
    MethodConfig:
      type: object
      properties:
        method:
          type: string
        scopes:
          type: array
          items:
            type: string
        scopes-enforcement-mode:
          $ref: '#/components/schemas/ScopeEnforcementMode'
    OAuthClientRepresentation:
      type: object
      properties:
        id:
          type: string
        clientId:
          type: string
        description:
          type: string
        rootUrl:
          type: string
        adminUrl:
          type: string
        baseUrl:
          type: string
        surrogateAuthRequired:
          type: boolean
        enabled:
          type: boolean
        alwaysDisplayInConsole:
          type: boolean
        clientAuthenticatorType:
          type: string
        secret:
          type: string
        registrationAccessToken:
          type: string
        defaultRoles:
          type: array
          items:
            type: string
        redirectUris:
          type: array
          items:
            type: string
        webOrigins:
          type: array
          items:
            type: string
        notBefore:
          type: integer
          format: int32
        bearerOnly:
          type: boolean
        consentRequired:
          type: boolean
        standardFlowEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        oauth2DeviceAuthorizationGrantEnabled:
          type: boolean
        authorizationServicesEnabled:
          type: boolean
        directGrantsOnly:
          type: boolean
        publicClient:
          type: boolean
        frontchannelLogout:
          type: boolean
        protocol:
          type: string
        attributes:
          type: object
          additionalProperties: true
        authenticationFlowBindingOverrides:
          type: object
          additionalProperties: true
        fullScopeAllowed:
          type: boolean
        nodeReRegistrationTimeout:
          type: integer
          format: int32
        registeredNodes:
          type: object
          additionalProperties: true
        protocolMappers:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
        clientTemplate:
          type: string
        useTemplateConfig:
          type: boolean
        useTemplateScope:
          type: boolean
        useTemplateMappers:
          type: boolean
        defaultClientScopes:
          type: array
          items:
            type: string
        optionalClientScopes:
          type: array
          items:
            type: string
        authorizationSettings:
          $ref: '#/components/schemas/ResourceServerRepresentation'
        access:
          type: object
          additionalProperties: true
        origin:
          type: string
        name:
          type: string
        claims:
          $ref: '#/components/schemas/ApplicationRepresentation_claims'
    PathCacheConfig:
      type: object
      properties:
        max-entries:
          type: integer
          format: int32
        lifespan:
          type: integer
          format: int64
    PathConfig:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        path:
          type: string
        methods:
          type: array
          items:
            $ref: '#/components/schemas/MethodConfig'
        scopes:
          type: array
          items:
            type: string
        id:
          type: string
        enforcement-mode:
          $ref: '#/components/schemas/EnforcementMode'
        claim-information-point:
          type: object
          additionalProperties: true
        invalidated:
          type: boolean
        staticPath:
          type: boolean
        static:
          type: boolean
    Permission:
      type: object
      properties:
        rsid:
          type: string
        rsname:
          type: string
        scopes:
          type: array
          items:
            type: string
          uniqueItems: true
        claims:
          type: object
          additionalProperties: true
    PolicyEnforcementMode:
      type: object
    PolicyEnforcerConfig:
      type: object
      properties:
        enforcement-mode:
          $ref: '#/components/schemas/EnforcementMode'
        paths:
          type: array
          items:
            $ref: '#/components/schemas/PathConfig'
        path-cache:
          $ref: '#/components/schemas/PathCacheConfig'
        lazy-load-paths:
          type: boolean
        on-deny-redirect-to:
          type: string
        user-managed-access:
          type: object
        claim-information-point:
          type: object
          additionalProperties: true
        http-method-as-scope:
          type: boolean
        realm:
          type: string
        auth-server-url:
          type: string
        credentials:
          type: object
          additionalProperties: true
        resource:
          type: string
    PolicyRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        policies:
          type: array
          items:
            type: string
          uniqueItems: true
        resources:
          type: array
          items:
            type: string
          uniqueItems: true
        scopes:
          type: array
          items:
            type: string
          uniqueItems: true
        logic:
          $ref: '#/components/schemas/Logic'
        decisionStrategy:
          $ref: '#/components/schemas/DecisionStrategy'
        owner:
          type: string
        resourcesData:
          type: array
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
          uniqueItems: true
        scopesData:
          type: array
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          uniqueItems: true
        config:
          type: object
          additionalProperties: true
    ProtocolMapperRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        protocol:
          type: string
        protocolMapper:
          type: string
        consentRequired:
          type: boolean
        consentText:
          type: string
        config:
          type: object
          additionalProperties: true
    PublishedRealmRepresentation:
      type: object
      properties:
        realm:
          type: string
        public_key:
          type: string
        token-service:
          type: string
        account-service:
          type: string
        tokens-not-before:
          type: integer
          format: int32
    RealmEventsConfigRepresentation:
      type: object
      properties:
        eventsEnabled:
          type: boolean
        eventsExpiration:
          type: integer
          format: int64
        eventsListeners:
          type: array
          items:
            type: string
        enabledEventTypes:
          type: array
          items:
            type: string
        adminEventsEnabled:
          type: boolean
        adminEventsDetailsEnabled:
          type: boolean
    RealmRepresentation:
      type: object
      properties:
        id:
          type: string
        realm:
          type: string
        displayName:
          type: string
        displayNameHtml:
          type: string
        notBefore:
          type: integer
          format: int32
        defaultSignatureAlgorithm:
          type: string
        revokeRefreshToken:
          type: boolean
        refreshTokenMaxReuse:
          type: integer
          format: int32
        accessTokenLifespan:
          type: integer
          format: int32
        accessTokenLifespanForImplicitFlow:
          type: integer
          format: int32
        ssoSessionIdleTimeout:
          type: integer
          format: int32
        ssoSessionMaxLifespan:
          type: integer
          format: int32
        ssoSessionIdleTimeoutRememberMe:
          type: integer
          format: int32
        ssoSessionMaxLifespanRememberMe:
          type: integer
          format: int32
        offlineSessionIdleTimeout:
          type: integer
          format: int32
        offlineSessionMaxLifespanEnabled:
          type: boolean
        offlineSessionMaxLifespan:
          type: integer
          format: int32
        clientSessionIdleTimeout:
          type: integer
          format: int32
        clientSessionMaxLifespan:
          type: integer
          format: int32
        clientOfflineSessionIdleTimeout:
          type: integer
          format: int32
        clientOfflineSessionMaxLifespan:
          type: integer
          format: int32
        accessCodeLifespan:
          type: integer
          format: int32
        accessCodeLifespanUserAction:
          type: integer
          format: int32
        accessCodeLifespanLogin:
          type: integer
          format: int32
        actionTokenGeneratedByAdminLifespan:
          type: integer
          format: int32
        actionTokenGeneratedByUserLifespan:
          type: integer
          format: int32
        oauth2DeviceCodeLifespan:
          type: integer
          format: int32
        oauth2DevicePollingInterval:
          type: integer
          format: int32
        enabled:
          type: boolean
        sslRequired:
          type: string
        passwordCredentialGrantAllowed:
          type: boolean
        registrationAllowed:
          type: boolean
        registrationEmailAsUsername:
          type: boolean
        rememberMe:
          type: boolean
        verifyEmail:
          type: boolean
        loginWithEmailAllowed:
          type: boolean
        duplicateEmailsAllowed:
          type: boolean
        resetPasswordAllowed:
          type: boolean
        editUsernameAllowed:
          type: boolean
        userCacheEnabled:
          type: boolean
        realmCacheEnabled:
          type: boolean
        bruteForceProtected:
          type: boolean
        permanentLockout:
          type: boolean
        maxFailureWaitSeconds:
          type: integer
          format: int32
        minimumQuickLoginWaitSeconds:
          type: integer
          format: int32
        waitIncrementSeconds:
          type: integer
          format: int32
        quickLoginCheckMilliSeconds:
          type: integer
          format: int64
        maxDeltaTimeSeconds:
          type: integer
          format: int32
        failureFactor:
          type: integer
          format: int32
        privateKey:
          type: string
        publicKey:
          type: string
        certificate:
          type: string
        codeSecret:
          type: string
        roles:
          $ref: '#/components/schemas/RolesRepresentation'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupRepresentation'
        defaultRoles:
          type: array
          items:
            type: string
        defaultRole:
          $ref: '#/components/schemas/RoleRepresentation'
        defaultGroups:
          type: array
          items:
            type: string
        requiredCredentials:
          type: array
          items:
            type: string
          uniqueItems: true
        passwordPolicy:
          type: string
        otpPolicyType:
          type: string
        otpPolicyAlgorithm:
          type: string
        otpPolicyInitialCounter:
          type: integer
          format: int32
        otpPolicyDigits:
          type: integer
          format: int32
        otpPolicyLookAheadWindow:
          type: integer
          format: int32
        otpPolicyPeriod:
          type: integer
          format: int32
        otpPolicyCodeReusable:
          type: boolean
        otpSupportedApplications:
          type: array
          items:
            type: string
        webAuthnPolicyRpEntityName:
          type: string
        webAuthnPolicySignatureAlgorithms:
          type: array
          items:
            type: string
        webAuthnPolicyRpId:
          type: string
        webAuthnPolicyAttestationConveyancePreference:
          type: string
        webAuthnPolicyAuthenticatorAttachment:
          type: string
        webAuthnPolicyRequireResidentKey:
          type: string
        webAuthnPolicyUserVerificationRequirement:
          type: string
        webAuthnPolicyCreateTimeout:
          type: integer
          format: int32
        webAuthnPolicyAvoidSameAuthenticatorRegister:
          type: boolean
        webAuthnPolicyAcceptableAaguids:
          type: array
          items:
            type: string
        webAuthnPolicyPasswordlessRpEntityName:
          type: string
        webAuthnPolicyPasswordlessSignatureAlgorithms:
          type: array
          items:
            type: string
        webAuthnPolicyPasswordlessRpId:
          type: string
        webAuthnPolicyPasswordlessAttestationConveyancePreference:
          type: string
        webAuthnPolicyPasswordlessAuthenticatorAttachment:
          type: string
        webAuthnPolicyPasswordlessRequireResidentKey:
          type: string
        webAuthnPolicyPasswordlessUserVerificationRequirement:
          type: string
        webAuthnPolicyPasswordlessCreateTimeout:
          type: integer
          format: int32
        webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister:
          type: boolean
        webAuthnPolicyPasswordlessAcceptableAaguids:
          type: array
          items:
            type: string
        clientProfiles:
          type: array
          items:
            type: object
        clientPolicies:
          type: array
          items:
            type: object
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserRepresentation'
        federatedUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserRepresentation'
        scopeMappings:
          type: array
          items:
            $ref: '#/components/schemas/ScopeMappingRepresentation'
        clientScopeMappings:
          type: object
          additionalProperties: true
        clients:
          type: array
          items:
            $ref: '#/components/schemas/ClientRepresentation'
        clientScopes:
          type: array
          items:
            $ref: '#/components/schemas/ClientScopeRepresentation'
        defaultDefaultClientScopes:
          type: array
          items:
            type: string
        defaultOptionalClientScopes:
          type: array
          items:
            type: string
        browserSecurityHeaders:
          type: object
          additionalProperties: true
        smtpServer:
          type: object
          additionalProperties: true
        userFederationProviders:
          type: array
          items:
            $ref: '#/components/schemas/UserFederationProviderRepresentation'
        userFederationMappers:
          type: array
          items:
            $ref: '#/components/schemas/UserFederationMapperRepresentation'
        loginTheme:
          type: string
        accountTheme:
          type: string
        adminTheme:
          type: string
        emailTheme:
          type: string
        eventsEnabled:
          type: boolean
        eventsExpiration:
          type: integer
          format: int64
        eventsListeners:
          type: array
          items:
            type: string
        enabledEventTypes:
          type: array
          items:
            type: string
        adminEventsEnabled:
          type: boolean
        adminEventsDetailsEnabled:
          type: boolean
        identityProviders:
          type: array
          items:
            $ref: '#/components/schemas/IdentityProviderRepresentation'
        identityProviderMappers:
          type: array
          items:
            $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
        protocolMappers:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
        components:
          type: object
          additionalProperties: true
        internationalizationEnabled:
          type: boolean
        supportedLocales:
          type: array
          items:
            type: string
          uniqueItems: true
        defaultLocale:
          type: string
        authenticationFlows:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationFlowRepresentation'
        authenticatorConfig:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
        requiredActions:
          type: array
          items:
            $ref: '#/components/schemas/RequiredActionProviderRepresentation'
        browserFlow:
          type: string
        registrationFlow:
          type: string
        directGrantFlow:
          type: string
        resetCredentialsFlow:
          type: string
        clientAuthenticationFlow:
          type: string
        dockerAuthenticationFlow:
          type: string
        attributes:
          type: object
          additionalProperties: true
        keycloakVersion:
          type: string
        userManagedAccessAllowed:
          type: boolean
        social:
          type: boolean
        updateProfileOnInitialSocialLogin:
          type: boolean
        socialProviders:
          type: object
          additionalProperties: true
        applicationScopeMappings:
          type: object
          additionalProperties: true
        applications:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRepresentation'
        oauthClients:
          type: array
          items:
            $ref: '#/components/schemas/OAuthClientRepresentation'
        clientTemplates:
          type: array
          items:
            $ref: '#/components/schemas/ClientTemplateRepresentation'
        oAuth2DeviceCodeLifespan:
          type: integer
          format: int32
        oAuth2DevicePollingInterval:
          type: integer
          format: int32
    RequiredActionProviderRepresentation:
      type: object
      properties:
        alias:
          type: string
        name:
          type: string
        providerId:
          type: string
        enabled:
          type: boolean
        defaultAction:
          type: boolean
        priority:
          type: integer
          format: int32
        config:
          type: object
          additionalProperties: true
    ResourceOwnerRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ResourceRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uris:
          type: array
          items:
            type: string
          uniqueItems: true
        type:
          type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          uniqueItems: true
        icon_uri:
          type: string
        owner:
          $ref: '#/components/schemas/ResourceRepresentation_owner'
        ownerManagedAccess:
          type: boolean
        displayName:
          type: string
        attributes:
          type: object
          additionalProperties: true
        uri:
          type: string
        scopesUma:
          type: array
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          uniqueItems: true
    ResourceRepresentationOwner:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ResourceServerRepresentation:
      type: object
      properties:
        id:
          type: string
        clientId:
          type: string
        name:
          type: string
        allowRemoteResourceManagement:
          type: boolean
        policyEnforcementMode:
          $ref: '#/components/schemas/PolicyEnforcementMode'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
        policies:
          type: array
          items:
            $ref: '#/components/schemas/PolicyRepresentation'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
        decisionStrategy:
          $ref: '#/components/schemas/DecisionStrategy'
    RoleRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        scopeParamRequired:
          type: boolean
        composite:
          type: boolean
        composites:
          $ref: '#/components/schemas/Composites'
        clientRole:
          type: boolean
        containerId:
          type: string
        attributes:
          type: object
          additionalProperties: true
    RolesRepresentation:
      type: object
      properties:
        realm:
          type: array
          items:
            $ref: '#/components/schemas/RoleRepresentation'
        client:
          type: object
          additionalProperties: true
        application:
          type: object
          additionalProperties: true
    ScopeEnforcementMode:
      type: object
    ScopeMappingRepresentation:
      type: object
      properties:
        self:
          type: string
        client:
          type: string
        clientTemplate:
          type: string
        clientScope:
          type: string
        roles:
          type: array
          items:
            type: string
          uniqueItems: true
    ScopeRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        iconUri:
          type: string
        policies:
          type: array
          items:
            $ref: '#/components/schemas/PolicyRepresentation'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
        displayName:
          type: string
    SocialLinkRepresentation:
      type: object
      properties:
        socialProvider:
          type: string
        socialUserId:
          type: string
        socialUsername:
          type: string
    UserConsentRepresentation:
      type: object
      properties:
        clientId:
          type: string
        grantedClientScopes:
          type: array
          items:
            type: string
        createdDate:
          type: integer
          format: int64
        lastUpdatedDate:
          type: integer
          format: int64
        grantedRealmRoles:
          type: array
          items:
            type: string
    UserFederationMapperRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        federationProviderDisplayName:
          type: string
        federationMapperType:
          type: string
        config:
          type: object
          additionalProperties: true
    UserFederationProviderRepresentation:
      type: object
      properties:
        id:
          type: string
        displayName:
          type: string
        providerName:
          type: string
        config:
          type: object
          additionalProperties: true
        priority:
          type: integer
          format: int32
        fullSyncPeriod:
          type: integer
          format: int32
        changedSyncPeriod:
          type: integer
          format: int32
        lastSync:
          type: integer
          format: int32
    UserRepresentation:
      type: object
      properties:
        self:
          type: string
        id:
          type: string
        origin:
          type: string
        createdTimestamp:
          type: integer
          format: int64
        username:
          type: string
        enabled:
          type: boolean
        totp:
          type: boolean
        emailVerified:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        federationLink:
          type: string
        serviceAccountClientId:
          type: string
        attributes:
          type: object
          additionalProperties: true
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/CredentialRepresentation'
        disableableCredentialTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        requiredActions:
          type: array
          items:
            type: string
        federatedIdentities:
          type: array
          items:
            $ref: '#/components/schemas/FederatedIdentityRepresentation'
        realmRoles:
          type: array
          items:
            type: string
        clientRoles:
          type: object
          additionalProperties: true
        clientConsents:
          type: array
          items:
            $ref: '#/components/schemas/UserConsentRepresentation'
        notBefore:
          type: integer
          format: int32
        applicationRoles:
          type: object
          additionalProperties: true
        socialLinks:
          type: array
          items:
            $ref: '#/components/schemas/SocialLinkRepresentation'
        groups:
          type: array
          items:
            type: string
        access:
          type: object
          additionalProperties: true
security:
  - access_token: []
